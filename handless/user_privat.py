from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command
from keyboards import reply, inline


user_router = Router()


@user_router.message(CommandStart())
async def start(message: types.Message):
    await message.answer("""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –º–æ–ª–æ—á–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏! ü•õüßÄ 
–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å! –í –Ω–∞—à–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, 
–≤–∫–ª—é—á–∞—è –º–æ–ª–æ–∫–æ (—Å–≤–µ–∂–µ–µ, –ø–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ, —É–ª—å—Ç—Ä–∞–ø–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ), —Å—ã—Ä—ã (—Ç–≤–µ—Ä–¥—ã–µ, –º—è–≥–∫–∏–µ, —Ä–∞—Å—Å–æ–ª—å–Ω—ã–µ),  –∫–µ—Ñ–∏—Ä 
(–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ãq –∏ —Å –¥–æ–±–∞–≤–∫–∞–º–∏), —Ç–≤–æ—Ä–æ–≥ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ! 
–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–µ–Ω—é. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å 
–æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–µ ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! üòä""",reply_markup=reply.start_kb)


@user_router.message(F.text.lower() == "–º–µ–Ω—é üìñ")
@user_router.message(Command("menu"))
async def menu(message: types.Message):
    await message.answer("–≤–æ—Ç –Ω–∞—à–µ –º–µ–Ω—é",reply_markup=reply.menu_kb)


@user_router.message(F.text.lower() == "–æ –Ω–∞—Å üë•")
@user_router.message(Command("about"))
async def about(message: types.Message):
    await message.answer("–±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –º–æ–ª–æ—á–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏",reply_markup=inline.links_kb)


@user_router.message(F.text.lower() == "–∫–æ–Ω—Ç–∞–∫—Ç—ã üéÆ")
@user_router.message(Command("contacts"))
async def contacts(message: types.Message):
    await message.answer("–õ—ë—à–∞ +375 29 228 228")


@user_router.message(F.text.lower() == "–∞–¥—Ä–µ—Å üÖøÔ∏è")
@user_router.message(Command("addresses"))
async def addresses(message: types.Message):
    await message.answer("–ù–∞—à –∞–¥—Ä–µ—Å ", reply_markup=inline.addresses_kb())


@user_router.callback_query(F.data.lower().startswith('addresses'))
async def addresses_types(callback: types.CallbackQuery):
    await callback.answer()
    querry = callback.data.split('_')[1]
    await callback.message.delete()
    if querry == "1":
        await callback.message.answer("–ø–µ—Ä–≤—ã–π –∞–¥—Ä–µ—Å")
    elif querry == "2":
        await callback.message.answer('–≤—Ç–æ—Ä–æ–π –∞–¥—Ä–µ—Å')
    elif querry == '3':
        await callback.message.answer('—Ç—Ä–µ—Ç–∏–π –∞–¥—Ä–µ—Å')
    elif querry == '4':
        await callback.message.answer('—á–µ—Ç–≤—ë—Ä—Ç—ã–π –∞–¥—Ä–µ—Å')


@user_router.message(F.text.lower() == "–Ω–∞–∑–∞–¥ üö´")
async def back_home(message: types.Message):
    await message.answer("–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply.start_kb)


# @user_router.message(F.text)
# @user_router.message(F.photo)
# @user_router.message(F.text.lower() == "–¥–æ—Å—Ç–∞–≤–∫–∞")
# @user_router.message(F.text.lower().contains("–¥–æ—Å—Ç–∞–≤"))
# @user_router.message(F.text.lower().startswith("–∫–∞–∫"))
# @user_router.message(F.text.lower().endswith("?"))
# @user_router.message(F.text.lower().startswith("–∫–∞–∫"), F.text.lower().endswith("?"))
# @user_router.message((F.text.lower().contains("—Ü–µ–Ω")) | (F.text.lower().contains("—Å—Ç–æ–∏–º–æ—Å—Ç")))
async def echo(message: types.Message):
    await message.answer("—Å—Ä–∞–±–æ—Ç–∞–ª –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä")

